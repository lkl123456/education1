<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
    
    <context:component-scan base-package="com.adks.dbclient.dao.multitanent, com.adks.dbclient.service.multinanent" />
    
    <!--mysql配置-->
    <!--日志过滤器-->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <!--配置输出日志，输出内容可选-->
        <property name="resultSetLogEnabled" value="false" />
        <!--logFilter参数直接配置-->
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

    <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
        <!-- 指定配置装载的目录  -->
        <property name="dir" value="META-INF/druid/wall/mysql" />
        <!--防止sql注入-->
        <property name="selectAllColumnAllow" value="true"/>
        <property name="selectIntoAllow" value="false"/>
        <property name="deleteAllow" value="true"/>
        <property name="replaceAllow" value="true"/>
        <property name="callAllow" value="false"/>
        <property name="truncateAllow" value="false"/>
        <property name="createTableAllow" value="false"/>
        <property name="alterTableAllow" value="false"/>
        <property name="dropTableAllow" value="false"/>
        <property name="commentAllow" value="true"/>
        <property name="noneBaseStatementAllow" value="false"/>
        <property name="multiStatementAllow" value="true"/>
        <property name="useAllow" value="false"/>
        <property name="describeAllow" value="false"/>
        <property name="showAllow" value="false"/>
        <property name="commitAllow" value="true"/>
        <!--<property name="rollbackAllow" value="false"/>-->
        <!--永真条件-->
        <!--大部分用真条件默认已启用拦截-->
        <!--此处的两个条件有数据损坏风险，但没有sql注入风险-->
        <property name="deleteWhereNoneCheck" value="true"/>
        <property name="updateWhereNoneCheck" value="true"/>


    </bean>
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <!--显式指定数据库类型-->
        <property name="dbType" value="mysql" />
        <!--读取指定的WallFilter配置-->
        <property name="config" ref="wall-filter-config" />
        <!--对被认为是攻击的SQL进行LOG.error输出-->
        <property name="logViolation" value="false"/>
        <!--对被认为是攻击的SQL抛出SQLExcepton-->
        <property name="throwException" value="true"/>
    </bean>
    <!--Druid内置 用于统计监控信息-->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--定义慢SQL标准-->
        <property name="slowSqlMillis" value="1" />
        <!--输出慢SQL日志-->
        <property name="logSlowSql" value="true" />
        <!--合并没有参数化的sql，使之参数化-->
        <property name="mergeSql" value="true" />
    </bean>




    <bean id="adksDataSourceMaster" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url"><value>${mysql.datasource.slave.jdbcUrl}</value></property>
        <property name="username"><value>${mysql.datasource.slave.user}</value></property>
        <property name="password"><value>${mysql.datasource.slave.password}</value></property>
        <!-- Connection Pooling Info -->
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 最大空闲连接数 -->
        <!--<property name="maxIdle" value="${druid.maxIdle}" />-->
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 超过时间限制是否回收 用这个属性配置 连接泄漏监测 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 超过时间限制多长 超时就会被强行回收 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${druid.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 查询超时时间 -->
        <property name="queryTimeout" value="${druid.queryTimeout}" />
        <!-- 事务查询超时时间 -->
        <property name="transactionQueryTimeout" value="${druid.transactionQueryTimeout}" />
        
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:Slf4j
               防御SQL注入的filter:wall -->
        <!--<property name="filters" value="${druid.filters}" />-->
        <property name="proxyFilters">
            <list>
                <ref bean="wall-filter"/>
                <ref bean="stat-filter" />
                <ref bean="log-filter"/>
            </list>
        </property>
        <!--<property name="useGlobalDataSourceStat" value="true" />-->
    </bean>



    <bean id="adksDataSourceSlave" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName"><value>com.mysql.jdbc.Driver</value></property>
        <property name="url"><value>${mysql.datasource.slave.jdbcUrl}</value></property>
        <property name="username"><value>${mysql.datasource.slave.user}</value></property>
        <property name="password"><value>${mysql.datasource.slave.password}</value></property>
        <!-- Connection Pooling Info -->
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 最大空闲连接数 -->
        <!--<property name="maxIdle" value="${druid.maxIdle}" />-->
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 超过时间限制是否回收 用这个属性配置 连接泄漏监测 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 超过时间限制多长 超时就会被强行回收 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${druid.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 查询超时时间 -->
        <property name="queryTimeout" value="${druid.queryTimeout}" />
        <!-- 事务查询超时时间 -->
        <property name="transactionQueryTimeout" value="${druid.transactionQueryTimeout}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:Slf4j
               防御SQL注入的filter:wall -->
        <!--<property name="filters" value="${druid.filters}" />-->
        <property name="proxyFilters">
            <list>
                <ref bean="wall-filter"/>
                <ref bean="stat-filter" />
                <ref bean="log-filter"/>
            </list>
        </property>
        <!--<property name="useGlobalDataSourceStat" value="true" />-->
    </bean>

    <bean id="mysqlClient" class="com.adks.dbclient.mysql.MultitenantMysqlClient" autowire="byName">
        <property name="dataSource" ref="adksDataSourceMaster" />
        <property name="dataSourceSlaves">
            <list>
                <ref bean="adksDataSourceSlave" />
            </list>
        </property>
    </bean>

    <bean id="jdbcTransaction" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="adksDataSourceMaster"/>
    </bean>

    <tx:annotation-driven transaction-manager="jdbcTransaction"/>
</beans>