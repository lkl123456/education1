<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">

	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
	</bean> -->
	<bean id="urlPermissionResolver"
		class="com.adks.admin.controller.shiro.permission.UrlPermissionResovler" />
	<bean id="hashMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5" />
	</bean>
	<!-- 自定义realm -->
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<bean id="myRealm" class="com.adks.admin.controller.realm.MyRealm">
		<!-- <property name="cachingEnabled" value="false"/> <property name="authenticationCachingEnabled" 
			value="true"/> <property name="authenticationCacheName" value="shiro-authenticationCache"/> 
			<property name="authorizationCachingEnabled" value="true"/> <property name="authorizationCacheName" 
			value="shiro-authorizationCache"/> <property name="credentialsMatcher" ref="hashMatcher"/> -->
	</bean>

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"></property>
		<!-- <property name="cacheManager" ref="cacheManager" /> -->
		<!-- <property name="sessionManager" ref="sessionManager" /> -->
		<property name="authorizer.permissionResolver" ref="urlPermissionResolver" />
	</bean>

	<bean id="resourceCheckFilter"
		class="com.adks.admin.controller.shiro.filter.ResourceCheckFilter">
		<property name="errorUrl" value="refuse" />
	</bean>

	<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="/userLogin/userTologin" />
	</bean>


	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 认证相关：当用户没有登陆访问资源时，自动跳转到该页面 -->
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/userLogin/userTologin" />
		<property name="successUrl" value="#" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
		<!-- 授权相关：当用户访问一个没有权限访问的资源 ，自动跳转到该页面 -->
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如error.html,然后用[admin]登录后访问/admin/listUser.jsp就看见浏览器会显示error.html -->
		<property name="unauthorizedUrl" value="/error.html" />
              <!--   退出过滤器 -->
		 <!-- <property name="filters">
            <map>
        		<entry key="logout" value-ref="systemLogoutFilter" />
            </map>
        </property> -->
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<!-- roles(角色)：例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法。 -->
		<!-- user:例如/admins/user/**=user没有参数表示必须存在用户，当登入操作时不做检查 -->
		<!-- resourceCheckFilter 自定义拦截 详见 com.adks.admin.controller.shiro.filter.ResourceCheckFilter -->
		<property name="filterChainDefinitions">
			<value>
				<!--不需要验证的方法接口或者权限 -->
				/userLogin/* = anon
				/static/** = anon
				/ = anon<!-- 配置此项用来访项目名称的时候跳转到登录 -->
				<!--需要通过验证才可以访问的 -->
				/userIndex/home = user,resourceCheckFilter
				/userIndex/userMenu = user,resourceCheckFilter
				/userIndex/userMenuList = user,resourceCheckFilter
				/sso/logout=logout
				<!-- 此处配置说明所有的接口访问必须是在用户登录的情况下才可以 如果后台接口没有录入的情况下可以配置此项 /** = authc,resourceCheckFilter -->
				/** = user,resourceCheckFilter<!--因为现有数据库中没有操作权限的数据，配置此项用来放开对其他没有录入的操作，必须是登录用户才可以访问 -->
			</value>
		</property>
	</bean>

	<!-- 对安全管理器 增强代码 ， spring 后处理器 -->
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
	<!-- 配置以下两个bean即可实现此功能 -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after 
		the lifecycleBeanProcessor has run -->
	<!-- 启动shiro注解 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<!-- 默认使用JDK代理 ，如被代理类没有实现接口，必须使用下列配置开启 cglib代理 -->
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>